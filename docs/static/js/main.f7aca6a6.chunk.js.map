{"version":3,"sources":["api/index.js","components/HangmanAlphabet/css.js","components/HangmanAlphabet/index.js","components/HangmanGuesses/css.js","components/HangmanGuesses/index.js","components/HangmanLetter/css.js","components/HangmanLetter/index.js","components/HangmanWord/index.js","css.js","App.js","index.js"],"names":["style","alphaContainer","maxWidth","btn","padding","fontSize","HangmanAlphabet","handleClick","event","letter","target","disabled","props","onClick","toRender","i","String","fromCharCode","push","e","Component","base","height","width","margin","textAlign","HangmanGuesses","Array","this","count","keys","map","isWinner","backgroundColor","border","usedGuesses","color","display","HangmanLetter","shownLetter","isShown","HangmanWord","letters","word","split","lettersToShow","showLetters","ucase","toUpperCase","show","includes","flexDirection","justifyContent","wrapper","minHeight","main","background","App","defaultState","correctGuesses","guessedLetters","tries","key","state","componentDidMount","resetState","setState","Math","floor","random","getWord","words","length","handleGameLoss","alert","handleGameWin","checkGameStatus","console","log","handleGuess","matches","match","RegExp","matchesCount","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7aca6a6.chunk.js","sourcesContent":["export default [\"Hello\", \"Goodbye\", \"Rock\", \"Paper\", \"Scissors\"];","const style = {\n    alphaContainer: {\n        maxWidth: \"500px\"\n    },\n    btn: {\n        padding: \"4px\",\n        fontSize: \"1.3em\"\n    }\n};\n\nexport default style;","import React, { Component } from 'react';\nimport style from './css.js';\n\n\nexport default class HangmanAlphabet extends Component {\n    handleClick = (event, letter) => {\n        event.target.disabled = true;\n        this.props.onClick(letter);\n    }\n\n    render() {\n        let toRender = [];\n        for (let i = 65; i < 91; i++) {\n            let letter = String.fromCharCode(i);\n            toRender.push(\n                <button\n                    onClick={(e) => this.handleClick(e, letter)}\n                    style={style.btn}>\n                    {letter}\n                </button>\n            );\n        }\n\n        return <div style={style.alphaContainer}>{toRender}</div>;\n    }\n}","const base = {\n    height: '10px',\n    width: '180px',\n    margin: '1px',\n    textAlign: 'center',\n    fontSize: '12px'\n}\n\nexport default base;","import React, { Component } from 'react';\nimport base from './css.js';\n\nexport default class HangmanGuesses extends Component {\n    render() {\n        let toRender = [...Array(this.props.count).keys()].map(i => {\n            return this.props.isWinner\n                ? (<div style={{ ...base, backgroundColor: 'green', border: `1px solid green` }}>{++i}</div>)\n                : i < this.props.usedGuesses\n                    ? (<div style={{ ...base, backgroundColor: this.props.color, border: `1px solid ${this.props.color}` }}>{++i}</div>)\n                    : (<div style={{ ...base, border: '1px solid black' }}>{++i}</div>)\n        })\n\n        return <div>GUESSES:{toRender}</div>\n    }\n}","const style = {\n    display: \"inline-block\",\n    margin: \"5px\",\n    fontSize: \"2em\"\n};\n\nexport default style;","import React, { Component } from 'react';\nimport style from './css.js';\n\nexport default class HangmanLetter extends Component {\n    render() {\n        let shownLetter = this.props.isShown ? this.props.letter : \"_\";\n        return <div style={style}>{shownLetter}</div>;\n    }\n}","import React, { Component } from 'react'\nimport HangmanLetter from '../HangmanLetter'\n\n\nexport default class HangmanWord extends Component {\n    render() {\n        let letters = this.props.word.split(\"\");\n        let lettersToShow = this.props.showLetters;\n        return (\n            <div>\n                {letters.map(letter => {\n                    let ucase = letter.toUpperCase();\n                    let show = lettersToShow.includes(ucase);\n                    return <HangmanLetter letter={ucase} isShown={show} />;\n                })}\n            </div>\n        );\n    }\n}","export const base = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    maxWidth: \"800px\",\n    margin: \"0 auto\",\n    justifyContent: 'center',\n}\n\nexport const style = {\n    wrapper: {\n        minHeight: '100px',\n        ...base\n    },\n    main: {\n        textAlign: 'center',\n        width: \"60%\",\n        padding: \"10px\",\n        background: \"#aaa\"\n    }\n}","import React, { Component } from 'react';\nimport words from './api';\nimport HangmanAlphabet from './components/HangmanAlphabet';\nimport HangmanGuesses from './components/HangmanGuesses';\nimport HangmanWord from './components/HangmanWord';\nimport { base, style } from './css.js';\n\n\nexport default class App extends Component {\n    defaultState = {\n        word: \"\",\n        color: 'red',\n        correctGuesses: 0,\n        guessedLetters: [],\n        tries: 8,\n        key: 1,\n        isWinner: false,\n    }\n\n    state = this.defaultState\n    componentDidMount = () => this.resetState();\n\n    resetState = () => {\n        this.setState({\n            ...this.defaultState,\n            key: Math.floor(Math.random() * 999)\n        }, () => this.getWord())\n    }\n\n    getWord = () => {\n        this.setState({\n            word: words[Math.floor(Math.random() * words.length)]\n        });\n    };\n\n    handleGameLoss = () => {\n        alert(\"GAME OVER! :( YOU LOSE :(\");\n        this.resetState();\n    }\n\n    handleGameWin = () => {\n        this.setState({\n            color: 'green',\n            isWinner: true,\n        }, () => alert(\"WINNER WINNER WINNER!!!\"))\n    }\n\n    checkGameStatus = () => {\n        console.log(this.state);\n        if (this.state.word.length === this.state.correctGuesses) {\n            this.handleGameWin();\n        }\n        else if (this.state.tries === this.state.guessedLetters.length) {\n            this.handleGameLoss();\n        }\n    }\n\n    handleGuess = letter => {\n        let matches = this.state.word.toUpperCase().match(new RegExp(letter, \"g\"))\n        let matchesCount = matches ? matches.length : 0;\n        console.log(matchesCount);\n        this.setState({\n            guessedLetters: [letter, ...this.state.guessedLetters],\n            correctGuesses: this.state.correctGuesses + matchesCount\n        }, () => this.checkGameStatus())\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={style.wrapper}>\n                    <HangmanGuesses\n                        isWinner={this.state.isWinner}\n                        count={this.state.tries}\n                        usedGuesses={this.state.guessedLetters.length}\n                        color={this.state.color} />\n                </div>\n                <div style={base}>\n                    <div style={style.main}>\n                        <HangmanWord word={this.state.word} showLetters={this.state.guessedLetters} />\n                        <HangmanAlphabet key={this.state.key} onClick={this.handleGuess} />\n                    </div>\n                </div>\n                <div style={{ ...base, marginTop: '10px' }}>\n                    <button disabled={!this.state.isWinner} onClick={this.resetState}>RESET GAME</button>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);"],"sourceRoot":""}